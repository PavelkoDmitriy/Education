Я выбрал три библиотеки: requests, pandas и matplotlib. Ниже приведены примеры кода и описание возможностей каждой библиотеки.

requests

Библиотека requests позволяет отправлять HTTP-запросы и получать ответы от серверов. Она предоставляет простой и удобный интерфейс для работы с HTTP-протоколом.

Пример кода:


import requests

# Отправляем GET-запрос на сайт
response = requests.get('https://www.example.com')

# Печатаем статус-код ответа
print(response.status_code)

# Печатаем содержимое ответа
print(response.text)

# Отправляем POST-запрос с данными
data = {'key': 'value'}
response = requests.post('https://www.example.com', data=data)

# Печатаем статус-код ответа
print(response.status_code)
Возможности библиотеки requests:

Отправка HTTP-запросов (GET, POST, PUT, DELETE и т.д.)
Получение ответов от серверов
Работа с cookies и сессиями
Поддержка SSL/TLS
pandas

Библиотека pandas предоставляет структуры данных и функции для эффективной работы с данными. Она позволяет легко читать и писать данные в различных форматах, выполнять операции с данными и анализировать их.

Пример кода:


import pandas as pd

# Читаем данные из файла CSV
df = pd.read_csv('data.csv')

# Печатаем первые 5 строк данных
print(df.head())

# Выполняем группировку данных по столбцу 'category' и считаем среднее значение столбца 'value'
grouped = df.groupby('category')['value'].mean()
print(grouped)

# Сохраняем данные в файл Excel
df.to_excel('data.xlsx', index=False)
Возможности библиотеки pandas:

Чтение и запись данных в различных форматах (CSV, Excel, JSON и т.д.)
Работа с структурами данных (DataFrames и Series)
Выполнение операций с данными (группировка, сортировка, фильтрация и т.д.)
Анализ данных (статистические функции, корреляция и т.д.)
matplotlib

Библиотека matplotlib позволяет создавать графики и визуализировать данные. Она предоставляет широкий спектр инструментов для создания различных типов графиков и диаграмм.

Пример кода:


import matplotlib.pyplot as plt

# Создаем данные для графика
x = [1, 2, 3, 4, 5]
y = [2, 4, 6, 8, 10]

# Создаем график
plt.plot(x, y)

# Добавляем заголовок и метки осей
plt.title('График')
plt.xlabel('X')
plt.ylabel('Y')

# Показываем график
plt.show()
Возможности библиотеки matplotlib:

Создание различных типов графиков (линейные, столбчатые, круговые и т.д.)
Настройка внешнего вида графиков (цвета, шрифты, размеры и т.д.)
Добавление меток и заголовков к графикам
Сохранение графиков в различных форматах (PNG, PDF, EPS и т.д.)
В заключении, библиотеки requests, pandas и matplotlib предоставляют широкий спектр возможностей для работы с данными и визуализации. С их помощью можно легко отправлять HTTP-запросы, работать с данными, анализировать их и создавать графики. Эти библиотеки являются незаменимыми инструментами для любого разработчика, работающего с данными.

Я выбрал библиотеки pandas, numpy и matplotlib для изучения и демонстрации их возможностей.

pandas:
Считывание данных из файла:

import pandas as pd

# Считываем данные из CSV-файла
df = pd.read_csv('data.csv')

# Выводим первые 5 строк
print(df.head())
Простой анализ данных:

# Рассчитываем среднее значение по столбцу 'Age'
average_age = df['Age'].mean()
print(f"Среднее значение возраста: {average_age}")

# Найдем максимальное и минимальное значения в столбце 'Salary'
max_salary = df['Salary'].max()
min_salary = df['Salary'].min()
print(f"Максимальный оклад: {max_salary}, Минимальный оклад: {min_salary}")
Вывод результатов в консоль:

# Выводим статистику по столбцам
print(df.describe())
numpy:
Создание массива чисел:

import numpy as np

# Создаем массив из 10 случайных чисел
random_numbers = np.random.rand(10)
print(random_numbers)
Математические операции с массивом:

# Считаем сумму всех элементов массива
sum_numbers = np.sum(random_numbers)
print(f"Сумма элементов массива: {sum_numbers}")

# Находим максимальное и минимальное значение в массиве
max_number = np.max(random_numbers)
min_number = np.min(random_numbers)
print(f"Максимальное число: {max_number}, Минимальное число: {min_number}")
Вывод результатов в консоль:

# Выводим тип данных и размер массива
print(f"Тип данных: {random_numbers.dtype}, Размер: {random_numbers.size}")
matplotlib:
Визуализация данных:

import matplotlib.pyplot as plt

# Создаем график рассеивания для двух столбцов данных
plt.scatter(df['Age'], df['Salary'])
plt.xlabel('Age')
plt.ylabel('Salary')
plt.title('Age vs Salary')
plt.show()
Комментарий на GitHub:

Библиотека pandas позволяет работать с большими объемами данных, предоставляя удобные инструменты для анализа и обработки. Она упрощает работу с CSV-файлами, позволяет выполнять различные статистические операции и визуализировать данные.

numpy - это мощная библиотека для научных вычислений, которая обеспечивает эффективную работу с массивами и матрицами. Она позволяет выполнять сложные математические операции и анализировать данные с высокой производительностью.

matplotlib - это библиотека для визуализации данных, которая позволяет создавать различные графики и диаграммы. Она интегрируется с другими библиотеками, такими как pandas, и упрощает процесс визуализации данных.

Использование этих библиотек значительно расширяет возможности Python в области анализа и визуализации данных, делая его мощным инструментом для работы с большими объемами информации.